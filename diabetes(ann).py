# -*- coding: utf-8 -*-
"""Diabetes(ANN).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1coMv85-w9ow7FFHU8AOuKRH6NcrVWn5H

# Artificial Neural Network

### Importing the libraries
"""

import numpy as np
import pandas as pd
import tensorflow as tf #

tf.__version__

"""## Part 1 - Data Preprocessing

### Importing the dataset
"""

dataset=pd.read_csv('diabetes.csv')
X = dataset.iloc[:, :-1] #because 3 column does not affects consequence
y = dataset.iloc[:, -1]

print(X)

print(y)

"""### Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2 , random_state=0)

"""### Feature Scaling"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""## Part 2 - Building the ANN

### Initializing the ANN
"""

ann  = tf.keras.models.Sequential()

"""### Adding the input layer and the first hidden layer"""

ann.add(tf.keras.layers.Dense(units=32 , activation="relu")) #adding first layer and hidden layer

"""### Adding the second hidden layer"""

ann.add(tf.keras.layers.Dense(units=32 , activation="relu")) #adding second layer and hidden layer

"""### Adding the output layer"""

ann.add(tf.keras.layers.Dense(units=1 , activation="sigmoid")) #adding output layer

"""## Part 3 - Training the ANN

### Compiling the ANN
"""

ann.compile(optimizer="adam" , loss="binary_crossentropy" , metrics=['accuracy']) #compiling ..

"""### Training the ANN on the Training set"""

ann.fit(X_train , y_train , batch_size=32 , epochs=100) #trainining.

"""## Part 4 - Making the predictions and evaluating the model

### Predicting the result of a single observation

# Sırasıyla:
# Pregnancies=2, Glucose=138,
BloodPressure=70,
SkinThickness=38,
# Insulin=100,
BMI=31.2,
DiabetesPedigreeFunction=0.439,
Age=29


So, It is sick or not ?

**Solution**
"""

print(ann.predict(sc.transform([[2,138,70,38,100,31.2,0.439,29]])) > 0.5)

"""### Predicting the Test set results"""

y_pred = ann.predict(X_test)
y_pred = (y_pred > 0.5)  # 0.5 eşik değeriyle sınıflandır
if not isinstance(y_test, np.ndarray):
    y_test = np.array(y_test)
comparison = np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1)), axis=1)
print(comparison)

"""### Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)